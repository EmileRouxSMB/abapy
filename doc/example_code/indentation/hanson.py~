'''
HANSON contact
===============
'''


class Hanson(object):
  '''
  Simulates the behavior of an mechanical contact with the Hanson equations. Hanson solution corresponds to the problem of conical indentation by considering the half-angle half_angle of the indenter.
  
  :param a: indenter contact radius. (mm)
  :type a: float 0 <= a < R
  :param F: load applied. (N)
  :type F: float F >= 0
  :param half_angle: indenter half angle. (radians)
  :type half_angle: float 
  :param H: materials parameters
  :type H: float depend to v and E (1/GPa)
  :param E: sample modulus. (GPa)
  :type E: float >= 0  
  :param v: sample Poisson.
  :type v: float
  :param e: epsilon depth of contact.
  :type e: float
  :param x: x coodinate of nodes.
  :type x: float
  :param y: y coodinate of nodes.
  :type y: float
  :param z: z coodinate of nodes.
  :type z: float
  
  Hanson model
      
  .. image:: images/Hanson_model.png
     :width: 650
      
  .. plot:: example_code/Hanson_ex.py
     :include-source:   
  '''
  def __init__(self, F = None, a = None, h = None, half_angle = 70.29, E = 1., nu = 0.3):
    self.E = E
    self.nu = nu
    self.half_angle = half_angle
   
 
    if (a, F, h) == (None, None, None):
      raise ValueError('a, F or h are not defined, at least one must be defined')
    if a != None:
      self.a = a
    if F != None:
      self.F = F
    if h != None:
      self.h = h    
    


    

# Managing Force    
  def set_F(self, F):
    from math import tan, radians
    self.a  = ( 2. * self.H * F *tan(radians(self.half_angle)) )**.5  
  def get_F(self):
    from math import tan, radians
    F = self.a**2 / ( 2.*self.H * tan(radians(self.half_angle)))
    return F  
  F = property(get_F, set_F)  


    
# Managing penetration
  def set_h(self, h):
    from math import pi, tan, radians
    self.a = 2. / pi * tan(radians(self.half_angle)) * h
  def get_h(self):
    return pi * self.a / ( tan(radians(self.half_angle)) * 2.)    
  h = property(get_h, set_h)
  
# Model internal parameters   
  def get_H(self):
    from math import pi
    H = (1.-self.nu**2) / (pi * self.E)
    return H
  H = property(get_H)
  
  def get_epsilon(self):
    from math import tan, radians
    return self.a / tan(radians(self.half_angle))
  epsilon = property(get_epsilon)
  
  def get_Eeq(self):
    '''Eeq: equivalent modulus (GPa)'''
    Eeq = self.E/(1.-self.nu**2)
    return Eeq
  Eeq = property(get_Eeq)  
  
  def  l1(self, r, z, t =0.):
    a = self.a  
    return 1./2. * ( ((r+a)**2 + z**2)**.5 - ((r-a)**2 + z**2)**.5 )
  
  
  def l2(self, r, z, t =0.):
    a = self.a
    return 1./2. * ( ((r+a)**2 + z**2)**.5 + ((r-a)**2 + z**2)**.5 )
  

#Sigma
  def sigma(self, r, z, t = 0., labels = None):
    '''
    Stress fiels inside the solid has.
    S defines the stress tensor.
    
    :param Sigma: stress tensor. (GPa)
    :type Sigma: 
    :param Sigma_rr: stress on the r face on the r direction (GPa)
    :type Sigma_rr: float
    :param Sigma_zz: stress on the z face on the z direction (GPa)
    :type Sigma_zz: float
    :param Sigma_tt: stres on the theta face on the theta direction (GPa)
    :type Sigma_tt: float
    :param Sigma_rz: shear stress, stress ont r face on the z direction (GPa)
    :type Sigma_rz: float
    :param r: r coodinate of nodes.
    :type r: float
    :param z: z coodinate of nodes.
    :type z: float
    :param t: theta coodinate of nodes.
    :type t: float
    '''
    from numpy import zeros_like
    return self.sigma_rr(r,z,t), self.sigma_zz(r,z,t), self.sigma_tt(r,z,t), self.sigma_rz(r,z,t), 0. * r, 0. * r
    
#Sigma 1
  def sigma_1(self, r, z, t = 0., labels = None):
    from numpy import array, log
    E = self.E
    e = self.epsilon
    a = self.a
    v = self.nu
    r, z = array(r), array(z)
    l1, l2 = self.l1(r,z),  self.l2(r,z)
    return - (E*e)/(2.*a*(1.-v**2))*( (1.+2.*v)*log((l2+(l2**2-r**2)**.5)/(z+(r**2+z**2)**.5))+ z*((l2**2-a**2)**.5/(l2**2-l1**2)-1./(r**2+z**2)**.5))
    
  
    
#Sigma 2
  def sigma_2(self, r, z, t = 0., labels = None):
    from numpy import array, log
    E = self.E
    e = self.epsilon
    a = self.a
    v = self.nu
    r, z = array(r), array(z)
    l1, l2 = self.l1(r,z),  self.l2(r,z)
    return - (E*e)/(2.*a*(1.-v**2))*( (1.-2.*v)*((1./(a*(r**2)))*(2.*a**2-l2**2)*(a**2-l1**2)**.5 + (z*(r**2+z**2)**.5)/r**2 - a**2/r**2) + (z**2*a*(r**2+2.*l1**2-2.*l2**2))/(r**2*(a**2-l1**2)**.5*(l2**2-l1**2)) + (z*(r**2+2.*z**2))/(r**2*(r**2+z**2)**.5) )     
      
    
#Sigma zz   
  def sigma_zz(self, r, z, t = 0., labels = None):
    from numpy import array, log
    E = self.E
    e = self.epsilon
    a = self.a
    v = self.nu
    r, z = array(r), array(z)
    l1, l2 = self.l1(r,z),  self.l2(r,z)
    return - (E*e)/(2.*a*(1.-v**2))*( log((l2+(l2**2-r**2)**.5) / (z+(r**2+z**2)**.5)) - (z**2*l2)/((l2**2-r**2)**.5*(l2**2-l1**2)) + z/(r**2+z**2)**.5)
   
    
#Sigma rz
  def sigma_rz(self, r, z, t = 0., labels = None):
    from numpy import array, log
    E = self.E
    e = self.epsilon
    a = self.a
    v = self.nu
    r, z = array(r), array(z)
    l1, l2 = self.l1(r,z),  self.l2(r,z)
    return - (E*e)/(2.*a*(1.-v**2)) * 1./r * ( (z*l2*(l2**2-r**2)**.5/(l2**2-l1**2)) - z**2/(r**2+z**2)**.5)
    
    
#Sigma xx
  def sigma_rr(self, r, z, t = 0., labels = None):
    return .5 * ( self.sigma_1(r, z) + self.sigma_2(r, z) )

#Sigma tt
  def sigma_tt(self, r, z, t = 0., labels = None):
    return .5 * ( self.sigma_1(r, z) - self.sigma_2(r, z) )    
    

